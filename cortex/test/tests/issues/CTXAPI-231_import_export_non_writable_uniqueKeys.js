'use strict'

const sandboxed = require('../../lib/sandboxed')

describe('Issues - CTXAPI-231 - Exporting and importing non-writable and/or autogenerated UUIDs fails.', function() {

  before(sandboxed(function() {

    /* global org */

    org.objects.objects.insertOne({
      label: 'CTXAPI-231',
      name: 'c_ctxapi_231',
      defaultAcl: 'owner.delete',
      createAcl: 'account.public',
      uniqueKey: 'c_key',
      properties: [
        {
          label: 'c_key',
          name: 'c_key',
          type: 'UUID',
          autoGenerate: true,
          indexed: true,
          unique: true,
          writable: false
        },
        {
          label: 'c_doc',
          name: 'c_doc',
          type: 'Document',
          array: true,
          uniqueKey: 'c_key',
          properties: [{
            label: 'c_key',
            name: 'c_key',
            type: 'UUID',
            autoGenerate: true,
            indexed: true,
            unique: true,
            writable: false,
            validators: [{
              name: 'uniqueInArray'
            }]
          }]
        }
      ]
    }).execute()

  }))

  after(sandboxed(function() {

    /* global org */

    const { Objects } = org.objects
    Objects.deleteOne({ name: 'c_ctxapi_231' }).execute()

  }))

  it('Export and import non-writable autogenerated UUID keys.', sandboxed(function() {

    /* global org */

    require('should')

    const { environment: { import: importEnvironment, export: exportEnvironment } } = require('developer'),
          { c_key: instanceKey, c_doc: { 0: { c_key: documentKey } } } = org.objects.c_ctxapi_231.insertOne({ c_doc: [{}] }).lean(false).execute(),
          manifest = {
            object: 'manifest',
            c_ctxapi_231: {
              includes: [
                instanceKey
              ]
            }
          },
          array = exportEnvironment({ manifest }).toArray()

    org.objects.c_ctxapi_231.deleteMany().execute()

    importEnvironment(array, { manifest, backup: false }).toArray()

    let instance = org.objects.c_ctxapi_231.find({ c_key: instanceKey }).paths('c_key', 'c_doc.c_key').next()

    instance.c_key.should.equal(instanceKey)
    instance.c_doc[0].c_key.should.equal(documentKey)

  }))

})
